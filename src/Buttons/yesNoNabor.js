//===========================================/ Import the modeles \===========================================\\
const { Client, ButtonInteraction, EmbedBuilder } = require('discord.js');

//==========< OTHERS >==========\\
const { Utility } = require('../config.js')
const requestsStat = require('../Structures/Models/requestsStat.js')

//===========================================< Code >===========================\\
module.exports = {
    data: {
        name: 'naborChoices'
    },

    /**
     * @param {Client} client
     * @param {ButtonInteraction} interaction
     */

    async execute(client, interaction) {
        const [, type, executor, subType] = interaction.customId.split('_')
        let color;
        let content = [];
        switch (subType) {
            case 'ControlModNab':
                content.push('–ö–æ–Ω—Ç—Ä–æ–ª–∞')
                break;
            case 'AssistModNab':
                content.push('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞')
                break;
            case 'EventModNab':
                content.push('–ò–≤–µ–Ω—Ç–µ—Ä–∞')
                break;
            case 'MafiaModNab1':
                content.push('–í–µ–¥—É—â–µ–≥–æ –º–∞—Ñ–∏–∏')
                break;
            case 'MafiaModNab2':
                content.push('–í–µ–¥—É—â–µ–≥–æ –±—É–Ω–∫–µ—Ä–∞')
                break;
            case 'CloseModNab':
                content.push('–ö–ª–æ–∑–µ—Ä–∞')
                break;
            case 'CreativeModNab':
                content.push('–ö—Ä–µ–∞—Ç–∏–≤–∞')
                break;
            case 'ContenterModNab':
                content.push('–ö–æ–Ω—Ç–µ–Ω—Ç–µ—Ä–∞')
                break;
        }
        switch (type) {
            case 'accept':
                color = Utility.colorGreen
                content.push(`<@${interaction.user.id}> \`–æ–¥–æ–±—Ä–∏–ª(–∞)\` –∑–∞—è–≤–∫—É!`, "\`\`\`ansi\n[2;36m[1;36m[1;36m[0;36m–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞![0m[1;36m[0m[1;36m[0m[2;36m[0m\`\`\`", `–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ **–ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!**`)
                await requestsStat.update({ status: '–û–¥–æ–±—Ä–µ–Ω–æ' }, { where: { executor: executor, type: subType, status: '–í –æ–∂–∏–¥–∞–Ω–∏–∏' } })
                break;
            case 'deny':
                color = Utility.colorRed
                content.push(`<@${interaction.user.id}> \`–æ—Ç–∫–ª–æ–Ω–∏–ª(–∞)\` –∑–∞—è–≤–∫—É!`, "\`\`\`ansi\n[2;36m[2;31m–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞![0m[2;36m[0m\`\`\`", "–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤–∞—à–µ–º—É \`–æ—Ç–∫–∞–∑—É\` –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ–º—É(–µ–π) –≤ **–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!**")
                await requestsStat.update({ status: '–û—Ç–∫–∞–∑–∞–Ω–æ' }, { where: { executor: executor, type: subType, status: '–í –æ–∂–∏–¥–∞–Ω–∏–∏' } })
                break;
        }
        await interaction.update({
            content: content[1],
            embeds: [{ ...interaction.message.embeds[0].data, color: color }],
            components: [{ components: [{ ...interaction.message.components[0].components[0].data, disabled: true }, { ...interaction.message.components[0].components[1].data, disabled: true }] }]
        })
        client.users.cache.get(executor).send({
            embeds: [new EmbedBuilder()
                .setAuthor({ name: `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${interaction.user.username} | ${interaction.user.id}`, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${content[2]}\n${content[3]}`)
                .setColor(Utility.colorDiscord)
                .setImage('https://cdn.discordapp.com/attachments/772218365413818428/1079003352408543302/11112.png')
                .setFooter({ text: `–°–µ—Ä–≤–µ—Ä | META „Éª –∑–∞—è–≤–∫–∏ –Ω–∞ ${content[0]}`, iconURL: Utility.iconMETA })]
        })
    }
}